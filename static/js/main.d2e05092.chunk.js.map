{"version":3,"sources":["services/indexedDB.ts","store/createReducer.ts","helpers/types.ts","store/actionTypes.ts","helpers/constants.ts","helpers/utils.ts","store/reducer.ts","hooks/useMemoSelector.ts","components/Lang/data.ts","components/Lang/index.tsx","components/Search/data.ts","components/Search/index.tsx","components/City/index.tsx","assets/loading.svg","components/Loading/index.tsx","components/WeatherList/index.tsx","components/WeatherOptions/data.ts","components/WeatherOptions/index.tsx","components/Weather/index.tsx","assets/background.png","App.tsx","index.tsx"],"names":["config","indexedDB","window","storeName","IndexedDB","openDB","db","tx","transaction","objectStore","this","getStore","store","getData","getAll","Promise","resolve","onsuccess","result","data","add","key","delete","clear","put","get","onerror","open","onupgradeneeded","createObjectStore","keyPath","createReducer","CityTypes","LocaleTypes","initialState","handlers","state","action","hasOwnProperty","type","SET_ACTIVE_LANG","ADD_CITY","SET_CURRENT_WEATHER","apiBaseUrl","apiKey","getWeatherByCity","a","cityName","unit","isStore","fetch","resultWeather","json","res","cod","Error","message","dispatch","currentWeather","addData","getWeatherByLatLong","lat","lon","city","id","Date","now","name","toLowerCase","cities","en","ru","handleCurrentPos","pos","coords","latitude","longitude","catchCurrentPos","getState","activeLang","activeCity","getIconUrl","icon","x","reducer","newEnCities","newRuCities","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","useSelector","useSelectorGeneric","useMemoSelector","selector","comparator","isEqual","languages","Lang","useDispatch","className","map","lang","onClick","searchCities","placeholder","Search","useState","inpVal","setInpVal","addCity","find","item","value","onChange","e","target","hidden","length","filter","includes","City","handleCityChange","Loading","src","loading","alt","WeatherList","weathers","weather","dt_txt","slice","Math","round","main","temp","draggable","feels_like","clouds","all","visibility","sea_level","grnd_level","humidity","wind","speed","deg","weatherOptions","height","WeatherOptions","style","Weather","currentWeatherList","useMemo","list","App","useEffect","navigator","geolocation","language","removeAllData","getCurrentPosition","background","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2e05092.chunk.js","sourcesContent":["const config = {\n  name: 'Weather',\n  version: 1,\n};\n\nconst { indexedDB } = window;\nconst storeName = 'DataStore';\n\nclass IndexedDB {\n  static openDB(): Promise<IDBDatabase> {\n    return new Promise(resolve => {\n      if (!indexedDB) {\n        return;\n      }\n\n      const openDB = indexedDB.open(config.name, config.version);\n\n      openDB.onupgradeneeded = () => {\n        openDB.result.createObjectStore(storeName, { keyPath: 'key' });\n      };\n\n      openDB.onsuccess = () => {\n        resolve(openDB.result);\n      };\n\n      openDB.onerror = () => {\n        const db = openDB.result;\n\n        if (!db) {\n          return null;\n        }\n      };\n    });\n  }\n\n  protected async getStore(): Promise<IDBObjectStore | null> {\n    const db = await IndexedDB.openDB();\n\n    if (db) {\n      const tx = db.transaction(storeName, 'readwrite');\n      return tx.objectStore(storeName);\n    }\n    return null;\n  }\n\n  async getAllData() {\n    const store = await this.getStore();\n    if (!store) return null;\n\n    const getData = store.getAll();\n\n    return new Promise((resolve => {\n      getData.onsuccess = () => {\n        resolve(getData.result);\n      };\n    }));\n  }\n\n  async addData<T>(data: T) {\n    const store = await this.getStore();\n\n    if (!store) return;\n\n    store.add(data);\n  }\n\n  async removeData(key: string) {\n    const store = await this.getStore();\n    if (!store) return;\n\n    store.delete(key);\n  }\n\n  async removeAllData() {\n    const store = await this.getStore();\n    if (!store) return;\n\n    store.clear();\n  }\n\n  async putData<T>(data: T) {\n    const store = await this.getStore();\n    if (!store) return;\n\n    store.put(data);\n  }\n\n  async getData<T>(key: string | number): Promise<T | null> {\n    const store = await this.getStore();\n    if (!store) return null;\n\n    const getData = store.get(key);\n\n    return new Promise((resolve => {\n      getData.onsuccess = () => resolve(getData.result);\n      getData.onerror = () => resolve(null);\n    }));\n  }\n}\n\nexport default new IndexedDB();\n","interface IActions {\n    type: string;\n}\n\nfunction createReducer<State, Action extends IActions>(\n    initialState: State,\n    handlers: { [key: string]: (state: State, action: Action) => State },\n) {\n    return function reducer(state: State = initialState, action: Action) {\n        if (handlers.hasOwnProperty(action.type)) {\n            return handlers[action.type](state, action);\n        }\n\n        return state;\n    };\n}\n\nexport default createReducer;\n","export enum CityTypes {\n    moscow = 'Moscow',\n    london = 'London',\n    newYork = 'New York',\n}\n\ntype unitType = 'standard' | 'metric' | 'imperial';\n\nexport enum LocaleTypes {\n    ru = 'ru',\n    en = 'en',\n}\n\nexport interface IActions {\n    activeCity: CityTypes | null;\n    currentWeather: any;\n    activeLang: LocaleTypes;\n    cities: ICit;\n    type: string;\n}\n\nexport interface IReducer {\n    currentWeather: any;\n    activeCity: CityTypes | null;\n    activeLang: LocaleTypes;\n    cities: ICities;\n}\n\nexport interface IGetWeatherByLatLong {\n    lat: number;\n    lon: number;\n    unit?: unitType;\n    isStore?: boolean;\n}\n\nexport interface IGetWeatherByCity {\n    cityName: string;\n    unit?: unitType;\n    isStore?: boolean;\n}\n\nexport interface ICity {\n    id: number;\n    name: string;\n    type: string;\n}\n\nexport interface ICit {\n    en: ICity,\n    ru: ICity,\n}\n\nexport interface ICities {\n    en: ICity[],\n    ru: ICity[],\n}\n","// locale\nexport const SET_ACTIVE_LANG = 'SET_ACTIVE_LANG';\n\n// city\nexport const SET_ACTIVE_CITY = 'SET_ACTIVE_CITY';\nexport const ADD_CITY = 'ADD_CITY';\n\n// weather\nexport const SET_CURRENT_WEATHER = 'SET_CURRENT_WEATHER';\n\n// reset\nexport const RESET_STATE = 'RESET_STATE';\n","// urls\nimport { ICities } from './types';\n\nexport const apiBaseUrl = 'https://api.openweathermap.org/';\nexport const apiKey = '2e11403a57273bd016db99e5e96d99d1';\n\n// default cities\nexport const initialCities: ICities = {\n    en: [{\n        id: 1,\n        name: 'Moscow',\n        type: 'moscow',\n    }, {\n        id: 2,\n        name: 'London',\n        type: 'london',\n    }, {\n        id: 3,\n        name: 'New-York',\n        type: 'new york',\n    }],\n    ru: [{\n        id: 1,\n        name: 'Москва',\n        type: 'moscow',\n    }, {\n        id: 2,\n        name: 'Лондон',\n        type: 'london',\n    }, {\n        id: 3,\n        name: 'Нью-Йорк',\n        type: 'new york',\n    }]\n}\n\n// default language\nexport const initialLang = 'en';\n","import { apiBaseUrl, apiKey } from './constants';\nimport { IGetWeatherByCity, IGetWeatherByLatLong } from './types';\nimport { dispatch, SET_CURRENT_WEATHER, getState, ADD_CITY } from '../store';\nimport IndexedDB from '../services/indexedDB';\n\nexport const getWeatherByCity = async ({ cityName, unit = 'metric', isStore }: IGetWeatherByCity) => {\n    try {\n        const resultWeather = await fetch(`${apiBaseUrl}/data/2.5/forecast?q=${cityName}&appid=${apiKey}&units=${unit}`);\n        const res = await resultWeather.json();\n\n        if (res.cod === '404') {\n            throw new Error(res.message);\n        }\n\n        if (isStore) {\n            dispatch({ type: SET_CURRENT_WEATHER, currentWeather: res });\n        }\n\n        await IndexedDB.addData({ key: cityName, ...res });\n\n        return res;\n    } catch (err) {\n        throw new Error(err.message);\n    }\n}\n\nexport const getWeatherByLatLong = async ({ lat, lon, unit = 'metric', isStore }: IGetWeatherByLatLong) => {\n    try {\n        const resultWeather = await fetch(`${apiBaseUrl}/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=${unit}`);\n        const res = await resultWeather.json();\n\n        if (res.cod === '404') {\n            throw new Error(res.message);\n        }\n\n        if (isStore) {\n\n            const city = {\n                id: Date.now(),\n                name: res.city.name,\n                type: res.city.name.toLowerCase()\n            };\n\n            const payload = {\n                en: city,\n                ru: city,\n            }\n\n            dispatch({ type: ADD_CITY, cities: payload });\n            dispatch({ type: SET_CURRENT_WEATHER, currentWeather: res });\n        }\n\n        await IndexedDB.addData({ key: res.city.name.toLowerCase(), ...res });\n\n        return res;\n    } catch (err) {\n        throw new Error(err.message);\n    }\n}\n\nexport const handleCurrentPos = async (pos: GeolocationPosition) => {\n    const { latitude, longitude } = pos.coords;\n\n    await getWeatherByLatLong({\n        lat: latitude,\n        lon: longitude,\n        isStore: true,\n    });\n};\n\nexport const catchCurrentPos = async () => {\n    const { activeLang, cities } = getState();\n    const activeCity = cities[activeLang][0].type;\n\n    const res = await IndexedDB.getData(activeCity);\n\n    if (res) {\n        dispatch({ type: SET_CURRENT_WEATHER, currentWeather: res });\n        return;\n    }\n\n    await getWeatherByCity({ cityName: activeCity, isStore: true });\n};\n\nexport const getIconUrl = (icon: string, x = 2) => `https://openweathermap.org/img/wn/${icon}@${x}x.png`\n","import { Dispatch } from 'react';\nimport { createStore, compose } from 'redux';\nimport {\n    TypedUseSelectorHook,\n    useSelector as useSelectorGeneric,\n} from 'react-redux';\n\nimport createReducer from './createReducer';\n\nimport { SET_CURRENT_WEATHER, RESET_STATE, SET_ACTIVE_CITY, SET_ACTIVE_LANG, ADD_CITY } from './actionTypes';\nimport { IActions, initialCities, initialLang, IReducer, LocaleTypes } from '../helpers';\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst initialState = {\n    currentWeather: null,\n    activeCity: null,\n    activeLang: initialLang as LocaleTypes,\n    cities: initialCities,\n};\n\nconst reducer = createReducer<IReducer, IActions>(initialState, {\n    [SET_CURRENT_WEATHER]: (state, action) => ({\n        ...state,\n        currentWeather: action.currentWeather,\n        activeCity: action.currentWeather.city.name.toLowerCase(),\n    }),\n    [SET_ACTIVE_CITY]: (state, action) => ({\n        ...state,\n        activeCity: action.activeCity,\n    }),\n    [SET_ACTIVE_LANG]: (state, action) => ({\n        ...state,\n        activeLang: action.activeLang,\n    }),\n    [ADD_CITY]: (state, action) => {\n        const newEnCities = [...state.cities.en, action.cities.en];\n        const newRuCities = [...state.cities.ru, action.cities.ru];\n\n        return {\n            ...state,\n            cities: {\n                en: newEnCities,\n                ru: newRuCities\n            },\n        };\n    },\n    [RESET_STATE]: () => initialState,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers());\n\nexport const { getState } = store;\nexport const { dispatch }: { dispatch: Dispatch<any> } = store;\nexport const useSelector: TypedUseSelectorHook<IReducer> = useSelectorGeneric;\n\nexport default store;\n","import { TypedUseSelectorHook } from 'react-redux';\nimport isEqual from 'react-fast-compare';\n\nimport { IReducer } from '../helpers';\nimport { useSelector } from '../store';\n\nconst useMemoSelector: TypedUseSelectorHook<IReducer> = (\n    selector,\n    comparator = isEqual,\n) => useSelector(selector, comparator);\n\nexport default useMemoSelector;\n","interface ILanguages {\n    id: number;\n    type: string;\n    name: string;\n}\n\nconst languages: ILanguages[] = [{\n    id: 1,\n    type: 'ru',\n    name: 'RU',\n}, {\n    id: 2,\n    type: 'en',\n    name: 'EN',\n}]\n\nexport default languages;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { useMemoSelector } from '../../hooks';\nimport { SET_ACTIVE_LANG } from '../../store';\nimport languages from './data';\n\nconst Lang = () => {\n    const dispatch = useDispatch();\n    const activeLang = useMemoSelector(state => state.activeLang);\n\n    return (\n        <div className='languages-container'>\n            {languages.map(lang =>\n                <div\n                    key={`lang-${lang.id}`}\n                    className={`${activeLang === lang.type ? 'active-lang' : ''}`}\n                    onClick={() => dispatch({ type: SET_ACTIVE_LANG, activeLang: lang.type })}\n                >\n                    {lang.name}\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Lang;\n","import { ICities } from '../../helpers';\n\nexport const searchCities: ICities = {\n    en: [{\n        id: 10,\n        name: 'Paris',\n        type: 'pairs',\n    }, {\n        id: 11,\n        name: 'Berlin',\n        type: 'berlin',\n    }, {\n        id: 12,\n        name: 'Madrid',\n        type: 'madrid',\n    }, {\n        id: 13,\n        name: 'Barcelona',\n        type: 'barcelona',\n    }, {\n        id: 14,\n        name: 'Vienna',\n        type: 'vienna',\n    }, {\n        id: 15,\n        name: 'Amsterdam',\n        type: 'amsterdam',\n    }, {\n        id: 16,\n        name: 'Rome',\n        type: 'rome',\n    }, {\n        id: 17,\n        name: 'Helsinki',\n        type: 'helsinki',\n    }, {\n        id: 18,\n        name: 'Oslo',\n        type: 'oslo',\n    }, {\n        id: 19,\n        name: 'Lisbon',\n        type: 'lisbon',\n    }],\n    ru: [{\n        id: 10,\n        name: 'Париж',\n        type: 'pairs',\n    }, {\n        id: 11,\n        name: 'Берлин',\n        type: 'berlin',\n    }, {\n        id: 12,\n        name: 'Мадрид',\n        type: 'madrid',\n    }, {\n        id: 13,\n        name: 'Барселона',\n        type: 'barcelona',\n    }, {\n        id: 14,\n        name: 'Вена',\n        type: 'vienna',\n    }, {\n        id: 15,\n        name: 'Амстердам',\n        type: 'amsterdam',\n    }, {\n        id: 16,\n        name: 'Рим',\n        type: 'rome',\n    }, {\n        id: 17,\n        name: 'Хельсинки',\n        type: 'helsinki',\n    }, {\n        id: 18,\n        name: 'Осло',\n        type: 'oslo',\n    }, {\n        id: 19,\n        name: 'Лиссабон',\n        type: 'lisbon',\n    }]\n};\n\nexport const placeholder = {\n    ru: 'Доб. город',\n    en: 'Add city'\n}\n","import React, { useState } from 'react';\nimport { useMemoSelector } from '../../hooks';\nimport { placeholder, searchCities } from './data';\nimport { useDispatch } from 'react-redux';\nimport { ADD_CITY, SET_CURRENT_WEATHER } from '../../store';\nimport { getWeatherByCity } from '../../helpers';\nimport IndexedDB from '../../services/indexedDB';\n\nconst Search = () => {\n    const dispatch = useDispatch();\n    const { activeLang, cities } = useMemoSelector(state => ({\n        activeLang: state.activeLang,\n        cities: state.cities,\n    }));\n\n    const [inpVal, setInpVal] = useState('');\n\n    const addCity = async (id: number) => {\n        const city = {\n            en: searchCities.en.find(item => item.id === id),\n            ru: searchCities.ru.find(item => item.id === id),\n        }\n\n        if (!city || !city.en) return;\n\n        if (!cities.en.find(item => item.id === id)) {\n            dispatch({ type: ADD_CITY, cities: city })\n        }\n\n        const res = await IndexedDB.getData(city.en.type);\n\n        if (res) {\n            dispatch({ type: SET_CURRENT_WEATHER, currentWeather: res });\n            setInpVal('');\n            return;\n        }\n\n        await getWeatherByCity({ cityName: city.en.type, isStore: true, });\n        setInpVal('');\n    }\n\n    return (\n        <div className='search-container'>\n            <input\n                type=\"text\"\n                value={inpVal}\n                placeholder={placeholder[activeLang]}\n                onChange={e => setInpVal(e.target.value)}\n            />\n            <div className='dropdown-cities' hidden={!inpVal.length}>\n                {inpVal.length && searchCities[activeLang] ? searchCities[activeLang]\n                    .filter(item => item.name.toLowerCase().includes(inpVal))\n                    .map(({ name, type, id }) =>\n                        <div key={`city-${id}`} onClick={async () => addCity(id)}>{name}</div>\n                    ) : null\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default Search;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport IndexedDB from '../../services/indexedDB';\nimport { SET_CURRENT_WEATHER } from '../../store';\nimport { useMemoSelector } from '../../hooks';\nimport { getWeatherByCity } from '../../helpers';\nimport Lang from '../Lang';\nimport Search from '../Search';\n\nconst City = (): JSX.Element => {\n    const dispatch = useDispatch();\n    const { activeCity, activeLang, cities } = useMemoSelector(state => ({\n        activeCity: state.activeCity,\n        activeLang: state.activeLang,\n        cities: state.cities,\n    }));\n\n    const handleCityChange = async (type: string) => {\n        const res = await IndexedDB.getData(type);\n\n        if (res) {\n            dispatch({ type: SET_CURRENT_WEATHER, currentWeather: res });\n            return;\n        }\n\n        await getWeatherByCity({ cityName: type, isStore: true });\n    }\n\n    return (\n        <div className='cities-main'>\n            <Search />\n            <div className='cities'>\n                {cities[activeLang] && cities[activeLang].map(({ name, id, type }) =>\n                    <div\n                        key={`city-${id}`}\n                        className={`citi-tab ${activeCity === type ? 'active-city' : ''}`}\n                        onClick={async () => handleCityChange(type)}\n                    >\n                        {name}\n                    </div>\n                )}\n            </div>\n            <Lang />\n        </div>\n    );\n}\n\nexport default City;\n","export default __webpack_public_path__ + \"static/media/loading.633c8ffd.svg\";","import React from 'react';\nimport loading from '../../assets/loading.svg';\n\nconst Loading = () => (\n    <div className='loading-container'>\n        <img src={loading} alt='loading'/>\n    </div>\n);\n\nexport default Loading;\n","import React from 'react';\nimport { getIconUrl } from '../../helpers';\n\nconst WeatherList = ({ weathers }: { weathers: any}) => (\n    <div className='weather-list'>\n        {weathers.map((weather: any) => (\n            <div\n                className='one-weather'\n                key={weather.dt_txt}\n            >\n                <div className='weather-date weather-list-item'>{weather.dt_txt.slice(0, -3)}</div>\n                <div className='weather-unit weather-list-item'>\n                    {Math.round(weather.main.temp)}°C\n                    <img src={getIconUrl(weather.weather[0].icon)} alt=\"icon\" draggable={false} />\n                </div>\n                <div className='weather-feels weather-list-item'>{Math.round(weather.main.feels_like)}°C</div>\n                <div className='weather-cloudiness weather-list-item'>{weather.clouds.all} %</div>\n                <div className='weather-visibility weather-list-item'>{weather.visibility / 1000} km</div>\n                <div className='weather-sea-level weather-list-item'>{weather.main.sea_level} hPa</div>\n                <div className='weather-ground-level weather-list-item'>{weather.main.grnd_level} hPa</div>\n                <div className='weather-humidity weather-list-item'>{weather.main.humidity} %</div>\n                <div className='weather-wind-speed weather-list-item'>{weather.wind.speed} m/s</div>\n                <div className='weather-wind-deg weather-list-item'>{weather.wind.deg}°</div>\n            </div>\n        ))}\n    </div>\n);\n\nexport default WeatherList;\n","interface IWeatherOption {\n    id: number;\n    name: string;\n    height: number;\n}\n\ninterface IWeatherOptions {\n    en: IWeatherOption[],\n    ru: IWeatherOption[],\n}\n\nconst weatherOptions: IWeatherOptions = {\n    en: [{\n        id: 1,\n        name: 'Date',\n        height: 20,\n    }, {\n        id: 2,\n        name: 'Temperature',\n        height: 40,\n    }, {\n        id: 3,\n        name: 'Feels Like',\n        height: 20,\n    }, {\n        id: 4,\n        name: 'Cloudiness',\n        height: 22,\n    }, {\n        id: 5,\n        name: 'Visibility',\n        height: 20,\n    }, {\n        id: 6,\n        name: 'Sea Lvl.',\n        height: 20,\n    }, {\n        id: 7,\n        name: 'Ground Lvl.',\n        height: 20,\n    }, {\n        id: 8,\n        name: 'Humidity',\n        height: 20,\n    }, {\n        id: 9,\n        name: 'Wind Speed',\n        height: 20,\n    }, {\n        id: 10,\n        name: 'Wind Dir.',\n        height: 20,\n    }],\n    ru: [{\n        id: 1,\n        name: 'Дата',\n        height: 20,\n    }, {\n        id: 2,\n        name: 'Температура',\n        height: 40,\n    }, {\n        id: 3,\n        name: 'Ощущ. как',\n        height: 20,\n    }, {\n        id: 4,\n        name: 'Облачность',\n        height: 22,\n    }, {\n        id: 5,\n        name: 'Видимость',\n        height: 20,\n    }, {\n        id: 6,\n        name: 'Ур. моря',\n        height: 20,\n    }, {\n        id: 7,\n        name: 'Нижний ур.',\n        height: 20,\n    }, {\n        id: 8,\n        name: 'Влажность',\n        height: 20,\n    }, {\n        id: 9,\n        name: 'Скор. ветра',\n        height: 20,\n    }, {\n        id: 10,\n        name: 'Нап. ветра',\n        height: 20,\n    }]\n};\n\nexport default weatherOptions;\n","import React from 'react';\nimport weatherOptions from './data';\nimport { useMemoSelector } from '../../hooks';\n\nconst WeatherOptions = () => {\n    const activeLang = useMemoSelector(state => state.activeLang);\n\n    return (\n        <div className='weather-options'>\n            {weatherOptions[activeLang] && weatherOptions[activeLang].map(({ name, id, height }) => <div style={{ height }} key={`weather-option-${id}`}>{name}</div> )}\n        </div>\n    )\n};\n\nexport default WeatherOptions;\n","import React, { useMemo } from 'react';\nimport { useMemoSelector } from '../../hooks';\nimport Loading from '../Loading';\nimport WeatherList from '../WeatherList';\nimport WeatherOptions from '../WeatherOptions';\n\n\nconst Weather = (): JSX.Element => {\n    const currentWeather = useMemoSelector(state => state.currentWeather);\n\n    const currentWeatherList = useMemo(() => {\n        if (!currentWeather) return null;\n\n        return currentWeather.list\n            .filter((item: any) => item.dt_txt.includes('12:00') || item.dt_txt.includes('18:00'))\n    }, [currentWeather]);\n\n    return currentWeather ? (\n        <div className='weather-main'>\n            <WeatherOptions />\n            <WeatherList weathers={currentWeatherList} />\n        </div>\n    ) : <Loading />\n}\n\nexport default Weather;\n","export default __webpack_public_path__ + \"static/media/background.90b1203b.png\";","import React, { useEffect } from 'react';\n\nimport City from './components/City';\nimport Weather from './components/Weather';\n\nimport background from './assets/background.png';\nimport { catchCurrentPos, handleCurrentPos, LocaleTypes } from './helpers';\nimport { useDispatch } from 'react-redux';\nimport { SET_ACTIVE_LANG } from './store';\nimport IndexedDB from './services/indexedDB';\n\nconst App = (): JSX.Element => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const { geolocation , language } = navigator;\n\n        IndexedDB.removeAllData();\n\n        geolocation.getCurrentPosition(handleCurrentPos, catchCurrentPos);\n\n        if (language.includes(LocaleTypes.ru)) {\n            dispatch({ type: SET_ACTIVE_LANG, activeLang: LocaleTypes.ru});\n            return;\n        }\n\n        if (language.includes(LocaleTypes.en)) {\n            dispatch({ type: SET_ACTIVE_LANG, activeLang: LocaleTypes.en});\n        }\n    }, [dispatch]);\n\n    return (\n        <div className='app'>\n            <div className='background-container'>\n                <img src={background} alt='background' draggable={false}/>\n            </div>\n            <div className='main-container'>\n                <City />\n                <Weather />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/reducer';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}